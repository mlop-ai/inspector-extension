import type { BrowserCookie } from "./browser-api";

export class DownloadService {
  static downloadCookies(cookies: BrowserCookie[], url: string): void {
    try {
      const hostname = new URL(url).hostname;
      const timestamp = new Date().toISOString().split("T")[0];

      // Create Netscape cookie file format
      let cookieContent = "# Netscape HTTP Cookie File\n";
      cookieContent += "# Generated by Cookie Inspector\n";
      cookieContent += `# Domain: ${hostname}\n`;
      cookieContent += `# Date: ${new Date().toISOString()}\n\n`;

      cookies.forEach((cookie) => {
        const domain = cookie.domain.startsWith(".")
          ? cookie.domain
          : `.${cookie.domain}`;
        const domainFlag = cookie.domain.startsWith(".") ? "TRUE" : "FALSE";
        const path = cookie.path || "/";
        const secure = cookie.secure ? "TRUE" : "FALSE";
        const expires = cookie.expirationDate
          ? Math.floor(cookie.expirationDate).toString()
          : "0";
        const name = cookie.name;
        const value = cookie.value;

        cookieContent += `${domain}\t${domainFlag}\t${path}\t${secure}\t${expires}\t${name}\t${value}\n`;
      });

      this.downloadFile(
        cookieContent,
        `cookies_${hostname}_${timestamp}.txt`,
        "text/plain"
      );
    } catch (error) {
      throw new Error("Failed to download cookies");
    }
  }

  static downloadCookiesAsJson(cookies: BrowserCookie[], url: string): void {
    try {
      const hostname = new URL(url).hostname;
      const timestamp = new Date().toISOString().split("T")[0];

      const data = {
        url,
        hostname,
        timestamp: new Date().toISOString(),
        cookies: cookies.map((cookie) => ({
          name: cookie.name,
          value: cookie.value,
          domain: cookie.domain,
          path: cookie.path,
          secure: cookie.secure,
          httpOnly: cookie.httpOnly,
          sameSite: cookie.sameSite,
          expires: cookie.expirationDate
            ? new Date(cookie.expirationDate * 1000).toISOString()
            : null,
          session: cookie.session,
        })),
      };

      const jsonContent = JSON.stringify(data, null, 2);
      this.downloadFile(
        jsonContent,
        `cookies_${hostname}_${timestamp}.json`,
        "application/json"
      );
    } catch (error) {
      throw new Error("Failed to download cookies as JSON");
    }
  }

  private static downloadFile(
    content: string,
    filename: string,
    mimeType: string
  ): void {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }
}
