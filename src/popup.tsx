import "~main.css";

import { useEffect, useState } from "react";

import { Button } from "~components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "~components/ui/card";
import { Input } from "~components/ui/input";
import { Skeleton } from "~components/ui/skeleton";
import { Toaster } from "~components/ui/toaster";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "~components/ui/tooltip";
import { useToast } from "~lib/use-toast";

interface CookieInfo {
  name: string;
  value: string;
  domain: string;
  path: string;
  secure: boolean;
  httpOnly: boolean;
  sameSite?: string;
  expirationDate?: number;
  session: boolean;
}

function CookieInspector() {
  const [cookies, setCookies] = useState<CookieInfo[]>([]);
  const [currentUrl, setCurrentUrl] = useState<string>("");
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [darkMode, setDarkMode] = useState(false);
  const [endpoint, setEndpoint] = useState("https://httpbin.org/post");
  const [sending, setSending] = useState(false);
  const [sendResult, setSendResult] = useState<string | null>(null);
  const { toast } = useToast();

  const loadCookies = async () => {
    try {
      setLoading(true);
      setError(null);

      const [tab] = await chrome.tabs.query({
        active: true,
        currentWindow: true,
      });

      if (!tab.url) {
        setError("Cannot access current tab URL");
        return;
      }

      setCurrentUrl(tab.url);
      const allCookies = await chrome.cookies.getAll({ url: tab.url });

      const cookiesWithInfo: CookieInfo[] = allCookies.map((cookie) => ({
        name: cookie.name,
        value: cookie.value,
        domain: cookie.domain,
        path: cookie.path,
        secure: cookie.secure,
        httpOnly: cookie.httpOnly,
        sameSite: cookie.sameSite,
        expirationDate: cookie.expirationDate,
        session: cookie.session,
      }));

      setCookies(cookiesWithInfo);
    } catch (err) {
      const errorMessage = `Failed to load cookies: ${err.message}`;
      setError(errorMessage);
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const sendCookies = async () => {
    try {
      setSending(true);
      setSendResult(null);

      const payload = {
        url: currentUrl,
        timestamp: new Date().toISOString(),
        cookies: cookies.map((cookie) => ({
          name: cookie.name,
          value: cookie.value,
          domain: cookie.domain,
          path: cookie.path,
          secure: cookie.secure,
          httpOnly: cookie.httpOnly,
          sameSite: cookie.sameSite,
          expires: cookie.expirationDate
            ? new Date(cookie.expirationDate * 1000).toISOString()
            : null,
          session: cookie.session,
        })),
      };

      const response = await fetch(endpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      if (response.ok) {
        const successMessage = `‚úì Success: ${response.status} ${response.statusText}`;
        setSendResult(successMessage);
      } else {
        const errorMessage = `‚úó Error: ${response.status} ${response.statusText}`;
        setSendResult(errorMessage);
        toast({
          title: "Error",
          description: "Failed to export cookies",
          variant: "destructive",
        });
      }
    } catch (err) {
      const errorMessage = `‚úó Network Error: ${err.message}`;
      setSendResult(errorMessage);
      toast({
        title: "Network Error",
        description: "Network error during export",
        variant: "destructive",
      });
    } finally {
      setSending(false);
    }
  };

  const downloadCookies = () => {
    try {
      const hostname = new URL(currentUrl).hostname;
      const timestamp = new Date().toISOString().split("T")[0];

      // Create Netscape cookie file format
      let cookieContent = "# Netscape HTTP Cookie File\n";
      cookieContent += "# Generated by Cookie Inspector\n";
      cookieContent += `# Domain: ${hostname}\n`;
      cookieContent += `# Date: ${new Date().toISOString()}\n\n`;

      cookies.forEach((cookie) => {
        const domain = cookie.domain.startsWith(".")
          ? cookie.domain
          : `.${cookie.domain}`;
        const domainFlag = cookie.domain.startsWith(".") ? "TRUE" : "FALSE";
        const path = cookie.path || "/";
        const secure = cookie.secure ? "TRUE" : "FALSE";
        const expires = cookie.expirationDate
          ? Math.floor(cookie.expirationDate).toString()
          : "0";
        const name = cookie.name;
        const value = cookie.value;

        cookieContent += `${domain}\t${domainFlag}\t${path}\t${secure}\t${expires}\t${name}\t${value}\n`;
      });

      const blob = new Blob([cookieContent], { type: "text/plain" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `cookies_${hostname}_${timestamp}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast({
        title: "Success",
        description: "Cookie file downloaded",
        variant: "success",
      });
    } catch (err) {
      toast({
        title: "Error",
        description: "Failed to download cookies",
        variant: "destructive",
      });
    }
  };

  useEffect(() => {
    loadCookies();
  }, []);

  useEffect(() => {
    document.documentElement.classList.toggle("dark", darkMode);
  }, [darkMode]);

  const filteredCookies = cookies.filter(
    (cookie) =>
      cookie.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      cookie.value.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const formatDate = (timestamp?: number) => {
    if (!timestamp) return "session";
    return new Date(timestamp * 1000).toISOString();
  };

  const copyCookieValue = async (value: string, name: string) => {
    try {
      await navigator.clipboard.writeText(value);
      toast({
        title: "Copied",
        description: `Copied ${name}`,
        variant: "success",
      });
    } catch (err) {
      toast({
        title: "Error",
        description: "Failed to copy",
        variant: "destructive",
      });
    }
  };

  const copyAllCookies = async () => {
    try {
      const cookieString = cookies
        .map((c) => `${c.name}=${c.value}`)
        .join("; ");
      await navigator.clipboard.writeText(cookieString);
      toast({
        title: "Copied",
        description: `Copied ${cookies.length} cookies`,
        variant: "success",
      });
    } catch (err) {
      toast({
        title: "Error",
        description: "Failed to copy cookies",
        variant: "destructive",
      });
    }
  };

  if (loading) {
    return (
      <div className="w-[800px] h-[600px] p-6 space-y-4">
        <Skeleton className="h-8 w-full" />
        <Skeleton className="h-4 w-3/4" />
        <div className="space-y-2">
          {[1, 2, 3, 4, 5].map((i) => (
            <Skeleton key={i} className="h-16 w-full" />
          ))}
        </div>
      </div>
    );
  }

  return (
    <TooltipProvider>
      <div className="w-[800px] h-[600px] p-6 bg-background text-foreground font-mono text-sm">
        {/* Header */}
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-lg font-bold text-blue-600 dark:text-blue-400">
              Cookie Inspector
            </h1>
            <div className="text-xs text-muted-foreground font-mono break-all">
              {new URL(currentUrl).hostname}
            </div>
          </div>
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setDarkMode(!darkMode)}
              className="text-xs"
            >
              {darkMode ? "‚òÄÔ∏è" : "üåô"}
            </Button>
            <Button
              onClick={loadCookies}
              variant="outline"
              size="sm"
              className="text-xs"
            >
              Refresh
            </Button>
          </div>
        </div>

        {error && (
          <div className="mb-4 p-3 bg-red-500/20 border border-red-500 rounded text-red-400 text-xs">
            Error: {error}
          </div>
        )}

        {/* Controls */}
        <div className="space-y-3 mb-4">
          <div className="flex gap-2">
            <Input
              placeholder="Filter cookies..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="flex-1 font-mono text-xs bg-background"
            />
            <Button
              onClick={copyAllCookies}
              variant="outline"
              size="sm"
              className="text-xs"
            >
              Copy All
            </Button>
            <Button
              onClick={downloadCookies}
              variant="outline"
              size="sm"
              className="text-xs"
            >
              Download
            </Button>
          </div>

          {/* HTTP Endpoint */}
          <div className="flex gap-2">
            <Input
              placeholder="HTTP endpoint URL..."
              value={endpoint}
              onChange={(e) => setEndpoint(e.target.value)}
              className="flex-1 font-mono text-xs bg-background"
            />
            <Button
              onClick={sendCookies}
              disabled={sending || !endpoint}
              variant="default"
              size="sm"
              className="text-xs bg-blue-600 hover:bg-blue-700"
            >
              {sending ? "Sending..." : "Export Cookies"}
            </Button>
          </div>

          {sendResult && (
            <div
              className={`text-xs p-2 rounded ${sendResult.startsWith("‚úì") ? "bg-green-500/20 text-green-400" : "bg-red-500/20 text-red-400"}`}
            >
              {sendResult}
            </div>
          )}

          <div className="text-xs text-muted-foreground">
            {filteredCookies.length} of {cookies.length} cookies
          </div>
        </div>

        {/* Cookie List */}
        <div className="space-y-1 max-h-96 overflow-y-auto border rounded bg-background/50">
          {filteredCookies.length === 0 ? (
            <div className="p-4 text-center text-muted-foreground text-xs">
              {cookies.length === 0
                ? "No cookies detected"
                : "No matching cookies"}
            </div>
          ) : (
            <div className="space-y-0">
              {/* Header */}
              <div className="sticky top-0 bg-muted p-2 text-xs font-bold border-b grid grid-cols-12 gap-2">
                <div className="col-span-3">Name</div>
                <div className="col-span-5">Value</div>
                <div className="col-span-2">Domain</div>
                <div className="col-span-2">Flags</div>
              </div>

              {filteredCookies.map((cookie, index) => (
                <div
                  key={index}
                  className="p-2 text-xs border-b hover:bg-accent/50 grid grid-cols-12 gap-2 items-center cursor-pointer"
                  onClick={() => copyCookieValue(cookie.value, cookie.name)}
                  title="Click to copy value"
                >
                  <div className="col-span-3 font-semibold text-blue-600 dark:text-blue-400 break-all">
                    {cookie.name}
                  </div>
                  <div className="col-span-5 break-all text-muted-foreground">
                    {cookie.value.length > 60
                      ? `${cookie.value.substring(0, 60)}...`
                      : cookie.value || "(empty)"}
                  </div>
                  <div className="col-span-2 text-muted-foreground">
                    {cookie.domain}
                  </div>
                  <div className="col-span-2 space-x-1">
                    {cookie.secure && (
                      <Tooltip>
                        <TooltipTrigger>
                          <span className="text-green-500 dark:text-green-400">
                            S
                          </span>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p>Secure - Only sent over HTTPS</p>
                        </TooltipContent>
                      </Tooltip>
                    )}
                    {cookie.httpOnly && (
                      <Tooltip>
                        <TooltipTrigger>
                          <span className="text-yellow-500 dark:text-yellow-400">
                            H
                          </span>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p>HttpOnly - Not accessible via JavaScript</p>
                        </TooltipContent>
                      </Tooltip>
                    )}
                    {cookie.sameSite && (
                      <Tooltip>
                        <TooltipTrigger>
                          <span className="text-purple-500 dark:text-purple-400">
                            SS
                          </span>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p>SameSite - {cookie.sameSite}</p>
                        </TooltipContent>
                      </Tooltip>
                    )}
                    {cookie.session && (
                      <Tooltip>
                        <TooltipTrigger>
                          <span className="text-blue-500 dark:text-blue-400">
                            T
                          </span>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p>Session - Temporary cookie</p>
                        </TooltipContent>
                      </Tooltip>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Legend */}
        <div className="mt-2 text-xs text-muted-foreground">
          Flags: S=Secure, H=HttpOnly, SS=SameSite, T=Session ‚Ä¢ Click row to
          copy value
        </div>
      </div>
      <Toaster />
    </TooltipProvider>
  );
}

function IndexPopup() {
  return <CookieInspector />;
}

export default IndexPopup;
